package main

import (
	"log"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"

	"search_service/docs" // docs is generated by Swag CLI, you have to import it.

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"search_service/handler"
	"search_service/models"
	"search_service/service"
)

// @Title Search Service API
// @Version 1.0
// @Description

// @Host localhost:8079
// @BasePath /api/v1/

func main() {
	docs.SwaggerInfo.Title = "Resource Admin Service API"
	docs.SwaggerInfo.Description = "This is an API for Resource Admin Service."
	docs.SwaggerInfo.Version = "1.0"
	docs.SwaggerInfo.Host = ""
	docs.SwaggerInfo.BasePath = "/api/v1/"
	docs.SwaggerInfo.Schemes = []string{"http", "https"}

	router := gin.Default()

	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	kafka := models.NewKafkaConsumer()
	go func(){
		kafka.Consume()
	}()

	elastic_client, err := models.NewESClient([]string{os.Getenv("")})
	if err != nil{
		log.Fatal(err)
	}
	searchService := service.NewService(elastic_client, "", 0)
	searchHandler := handler.NewHandler(searchService)
	
	api := router.Group("/api/v1/")
	{
		api.GET("/:id", searchHandler.GetResourceByID)
		api.GET("/search", searchHandler.SearchResourcesByFilter)
	}

	server := &http.Server{
		Addr: os.Getenv("SERVER_ADDR"),
		Handler: router,
		ReadTimeout: 5 * time.Second,
		WriteTimeout: 5 * time.Second,
	}

	err = server.ListenAndServe()
	if err != nil{
		log.Fatal(err)
	}
}

